from django.db import models
from django.core.exceptions import ValidationError
from .enums import ACCESS_CHOICES
from ..models import GroupModel
from datetime import date


def validate_previous_board(obj):
    if obj.predecessor:
        # Ensure the board is not set as its own predecessor
        if obj.predecessor.board_id == obj.board_id:
            raise ValidationError(
                "The board cannot be set as it's own predecessor!")


class BoardModel(models.Model):
    ''' Board information '''
    # Autogenerated board id as primary key
    board_id = models.AutoField(primary_key=True)
    creation_date = models.DateField(
        default=date.today, null=False, blank=False, editable=True)

    ''' Board relationships '''
    # Reference to the previous board. If null then this is the first board
    predecessor = models.ForeignKey(
        "self", on_delete=models.SET_NULL, blank=True, null=True)

    group = models.OneToOneField(
        GroupModel, on_delete=models.CASCADE, blank=True, related_name="board")

    class Meta:
        ''' Configure the name displayed in the admin panel '''
        verbose_name = "Board"
        verbose_name_plural = "Boards"

    def __str__(self):
        roles = self.role_set.filter()

        # Represent the board as first three members
        members = ", ".join(str(r) for r in roles[:3])

        return members + " - est. " + str(self.creation_date)

    def __contains__(self, other):
        '''  This method checks if a user is part of a board '''
        roles = self.role_set.filter(member=other)
        return True if roles else False

    def get_role(self, member):
        ''' This method retrieves the role of a board member '''
        if not member in self:
            if member in self.group:
                return "Member"

            return None

        # Return the full role descriptor for the user
        return self.role_set.all().get(member=member).get_full_role()

    def get_roles_sorted(self):
        ''' Returns a sorted list based on role importance '''
        roles = self.role_set.filter()
        order = ['P', 'VP', 'C', '-']
        order = {key: i for i, key in enumerate(order)}

        # Sort the QuerySet based on the order dict
        ordered_roles = sorted(
            roles, key=lambda role: order.get(role.role, 0))

        return ordered_roles

    def clean(self):
        ''' This method is "magically" called by django whenever a model instance is saved '''
        # TODO: Find a way to validate related objects in the clean method...
        validate_previous_board(self)
