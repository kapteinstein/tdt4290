from django.db import models
from django.core.exceptions import ValidationError
from .enums import ACCESS_CHOICES
from ..models import GroupModel
from datetime import date


def validate_previous_board(obj):
    if obj.predecessor:
        # Ensure the board is not set as its own predecessor
        if obj.predecessor.board_id == obj.board_id:
            raise ValidationError(
                "The board cannot be set as it's own predecessor!")


class BoardModel(models.Model):
    ''' Board information '''
    # Autogenerated board id as primary key
    board_id = models.AutoField(primary_key=True)
    creation_date = models.DateField(
        default=date.today, null=False, blank=False, editable=True)

    ''' Board relationships '''
    # Reference to the previous board. If null then this is the first board
    predecessor = models.ForeignKey(
        "self", on_delete=models.SET_NULL, blank=True, null=True)

    group = models.OneToOneField(
        GroupModel, on_delete=models.CASCADE, blank=True)

    class Meta:
        ''' Configure the name displayed in the admin panel '''
        verbose_name = "Board"
        verbose_name_plural = "Boards"

    def __str__(self):
        roles = self.role_set.all().filter()

        # Represent the board as first three members
        members = ", ".join(str(r) for r in roles[:3])

        return members + " - est. " + str(self.creation_date)

    def clean(self):
        ''' This method is "magically" called by django whenever a model instance is saved '''
        # TODO: Find a way to validate related objects in the clean method...
        validate_previous_board(self)
