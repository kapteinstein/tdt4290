from django.db import models
from django.template.defaultfilters import slugify
from .group_media import GroupMediaModel
from .group_meta import GroupMetaModel
from .enums import ACCESS_CHOICES
from datetime import date


class GroupModel(models.Model):
    ''' Group information '''
    # Autogenerated group id as primary key
    group_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=40)
    # Generate a slug based on group name (see save method below)
    slug = models.SlugField(editable=False)
    # Default to object creation time but allow this to be set manually
    founding_date = models.DateField(
        default=date.today, null=False, blank=False, editable=True)

    ''' Group details '''
    # Payment key for Stripe (or similar)
    payment_key = models.CharField(max_length=40, null=True, blank=True)
    # Newsletter key for MailGun
    newsletter_key = models.CharField(
        max_length=40, null=True, blank=True)

    ''' Group accessibility '''
    # Use the access enum with default being open/public
    access = models.CharField(
        max_length=20, choices=ACCESS_CHOICES, default="O")

    ''' Group relationships '''
    sub_group = models.ManyToManyField(
        "self", through='GroupRelationshipModel', symmetrical=False, blank=True, related_name="related_to")

    members = models.ManyToManyField('UserModel', through='MembershipModel')

    ''' Class Methods '''

    class Meta:
        ''' Configure the name displayed in the admin panel '''
        verbose_name = "Group"
        verbose_name_plural = "Groups"

    def __str__(self):
        return self.name.title()

    def __contains__(self, other):
        return other in self.members.all()

    # Override the default save method to generate a slug
    def save(self, *args, **kwargs):
        self.slug = slugify(self.name)
        super(GroupModel, self).save(*args, **kwargs)

    def get_access_status(self):
        return dict(ACCESS_CHOICES)[self.access]
